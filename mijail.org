#+TITLE: My emacs configuration
#+AUTHOR: Mijail Aron Alvarez Cerrillo
#+EMAIL: mijail.iso@ciencias.unam.mx
* About
  This is a basic setup for emacs.
  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Mijail Alvarez")
  (setq user-mail-address "mijail.iso@ciencias.unam.mx")
  #+END_SRC
* Configurations
** Packages
   Setting up
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (package-initialize)
   #+END_SRC

   Package Archives
   #+BEGIN_SRC emacs-lisp
     (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
			      ("org" . "http://orgmode.org/elpa/")
			      ("gnu" . "http://elpa.gnu.org/packages/")
			      ("marmalade" . "http://marmalade-repo.org/packages/")))
   #+END_SRC

   Packages to install
   #+BEGIN_SRC emacs-lisp
   (setq my-package-list '(rainbow-delimiters
			   flymake
			   auto-complete
			   autopair
			   yasnippet
			   flycheck
			   python-mode
			   jedi
			   flymake-python-pyflakes
			   elpy
			   smart-mode-line
			   dracula-theme
			   column-enforce-mode
			   helm
			   jdee
			   pdf-tools
			   haskell-mode
			   magit
			   markdown-mode+
			   gh-md
			   disable-mouse
			   org
			   org-bullets
			   htmlize
			   importmagic
			   yasnippet-snippets
			   org-mind-map
			   use-package
			   bison-mode
			   ac-html
			   ))
   #+END_SRC
   
   #+begin_src emacs-lisp
     (package-initialize)
     (add-to-list 'package-archives
		  '("melpa" . "http://melpa.org/packages/"))
     (add-to-list 'package-archives
		  '("org" . "http://orgmode.org/elpa/"))

     ;; install any packages in my-package-list, if they are not installed already
     (let ((refreshed nil))
       (when (not package-archive-contents)
	 (package-refresh-contents)
	 (setq refreshed t))
       (dolist (pkg my-package-list)
	 (when (and (not (package-installed-p pkg))
		    (assoc pkg package-archive-contents))
	   (unless refreshed
	     (package-refresh-contents)
	     (setq refreshed t))
	   (package-install pkg))))
   #+end_src
** Look and feel
*** UI
    UI - Emacs looks cool
    Restore previous session(windows and buffers)
    #+BEGIN_SRC emacs-lisp
     (desktop-save-mode 1)
    #+END_SRC

    Full screen without bars and menu.
    #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (defun fullscreen ()
       (interactive)
       (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
			      '(2 "_NET_WM_STATE_FULLSCREEN" 0)))
     (fullscreen)
    #+END_SRC

    Disable Mouse
    #+BEGIN_SRC emacs-lisp
     (global-disable-mouse-mode)
    #+END_SRC
     
    Show time
    #+BEGIN_SRC emacs-lisp
     (display-time-mode)
    #+END_SRC

    SML
    #+BEGIN_SRC emacs-lisp
     (setq sml/no-confirm-load-theme t)
     (setq sml/theme 'dark)
     (sml/setup)
    #+END_SRC

    use C-x for cut
    C-c for copy
    C-v for paste
    #+BEGIN_SRC emacs-lisp
    ;(cua-mode 1)
    #+END_SRC

    Stop using the arrow keys
    #+BEGIN_SRC emacs-lisp
     (global-unset-key [left])
     (global-unset-key [up])
     (global-unset-key [right])
     (global-unset-key [down])
     (global-unset-key [home])
     (global-unset-key [end])
     (global-unset-key [prior])
     (global-unset-key [next])
    #+END_SRC

    Navigation(windmove) change window
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c b")  'windmove-left)
    (global-set-key (kbd "C-c f") 'windmove-right)
    (global-set-key (kbd "C-c p")    'windmove-up)
    (global-set-key (kbd "C-c n")  'windmove-down)
    #+END_SRC
      
    Select the previous buffer in the buffer list (previous-buffer). 
    #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x b") 'previous-buffer)
    #+END_SRC

    Select the next buffer in the buffer list (next-buffer). 
    #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x f") 'next-buffer)
    #+END_SRC

    Theme Dracula
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/dracula-theme-20160826.627")
    (load-theme 'dracula t)
    #+END_SRC

    Show column number
    #+BEGIN_SRC emacs-lisp
     (setq column-number-mode t)
    #+END_SRC

    Keep the syntax highlighting in the current line.
    #+BEGIN_SRC emacs-lisp
     (set-face-foreground 'highlight nil)
    #+END_SRC
    
    Highlight current line
    #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
     (set-face-background 'hl-line "#383838")
    #+END_SRC

    Each successive level is highlighted in a different color.
    #+BEGIN_SRC emacs-lisp
     (require 'rainbow-delimiters)
     (add-hook 'jdee-mode-hook 'rainbow-delimiters-mode)
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    #+END_SRC

    Allow to see matching pairs of parentheses and other characters.
    #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
    #+END_SRC

    Highlight text that extends beyond a certain column.
    #+BEGIN_SRC emacs-lisp
     (require 'column-enforce-mode)
     (global-column-enforce-mode t)
    #+END_SRC

    Change "yes or no" to "y or n"
    #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

    Set Kill Buffer to Kill Buffer and Window
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-x k") 'kill-buffer-and-window)
    #+end_src

    Set Chrome as a default browser
    #+begin_src emacs-lisp
    (setq browse-url-browser-function 'browse-url-generic
	  browse-url-generic-program "google-chrome")
    #+end_src
    
*** Helm
    Helm configuration
    #+BEGIN_SRC emacs-lisp
      (require 'helm)
      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "C-x C-f") 'helm-find-files)
      (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)
      (global-set-key (kbd "C-x C-b") 'helm-mini)
      (global-set-key (kbd "M-l") 'helm-mini)
      (setq helm-buffers-fuzzy-matching t
            helm-recentf-fuzzy-match    t)
      (global-set-key (kbd "C-c h o") 'helm-occur)
      (global-set-key (kbd "C-h a") 'helm-apropos)
      (setq helm-apropos-fuzzy-match t)
      (setq helm-semantic-fuzzy-match t
            helm-imenu-fuzzy-match    t)
      (helm-autoresize-mode t)
      (helm-mode 1)
    #+END_SRC

*** Term
    [[http://oremacs.com/2015/01/01/three-ansi-term-tips/][Term]]
    - Close buffer of Ansi term when u press exit in the terminal.
    #+BEGIN_SRC emacs-lisp
     (defun oleh-term-exec-hook ()
       (let* ((buff (current-buffer))
              (proc (get-buffer-process buff)))
         (set-process-sentinel
          proc
          `(lambda (process event)
             (if (string= event "finished\n")
                 (kill-buffer ,buff))))))

     (add-hook 'term-exec-hook 'oleh-term-exec-hook)
    #+END_SRC

    - Paste with =C-c C-y= in ansi term.
    #+BEGIN_SRC emacs-lisp
     (eval-after-load "term"
       '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))
    #+END_SRC

** Programming modes
*** Java
    [[https://github.com/jdee-emacs/jdee-server][JDEE JAVA BACK END]]
    #+BEGIN_SRC emacs-lisp
      (setq jdee-server-dir "~/.emacs.d/myJars/")
    #+END_SRC

    Add jdee to auto complete
    #+BEGIN_SRC emacs-lisp
                                              ;(push 'jdee-mode ac-modes)
    #+END_SRC   
*** Python
    Flymake
    #+BEGIN_SRC emacs-lisp
      (require 'flymake-python-pyflakes)
      (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)
    #+END_SRC
    
    Elpy mode and JEDI
    For JEDI we need install pip and virtualenv
    #+begin_src shell
    sudo apt update
    #Then
    sudo apt install python-pip
    #Then
    pip --version
    #Then we Install visrtualenv
    pip install virtualenv
    #+end_src
    #+BEGIN_SRC emacs-lisp
    (elpy-enable)
    (setenv "PYTHONPATH" "/usr/bin/python")
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (setq elpy-rpc-python-command "python3")
    (setq python-shell-interpreter "python3")
    (custom-set-variables
     '(flycheck-python-flake8-executable "python3")
     '(flycheck-python-pycompile-executable "python3")
     '(flycheck-python-pylint-executable "python3"))
    #+END_SRC
*** Bison
    Setup files ending in “.flex” or ".y" to open in bison-mode.
    #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.flex\\'" . bison-mode))
    (add-to-list 'auto-mode-alist '("\\.y\\'" . bison-mode))
    #+end_src
** Editing
   Auto complete
   #+BEGIN_SRC emacs-lisp
   (require 'auto-complete)
   (require 'auto-complete-config)
   (ac-config-default)
   #+END_SRC

   Autopair
   #+BEGIN_SRC emacs-lisp
   (require 'autopair)
   (autopair-global-mode t)
   #+END_SRC 

   Yasnippet
   #+BEGIN_SRC emacs-lisp
   (require 'yasnippet)
   (yas-global-mode 1)
   (add-hook 'term-mode-hook (lambda()
			       (yas-minor-mode -1)))
   #+END_SRC
   
   Flycheck globally
   #+BEGIN_SRC emacs-lisp
   (require 'flycheck)
   (add-hook 'after-init-hook #'global-flycheck-mode)
   #+END_SRC
   
** Tools
   PDF Tools is, among other things, a replacement of DocView for PDF files.
   #+BEGIN_SRC emacs-lisp
     (pdf-tools-install)
   #+END_SRC
   
   Org Color in Backgroung of blocks HTML
#   #+begin_src emacs-lisp
   (defun my-org-inline-css-hook (exporter)
     "Insert custom inline css"
     (when (eq exporter 'html)
       (let ((my-pre-bg (face-background 'default)))
	 (setq org-html-head-include-default-style nil)
	 (setq org-html-head
	       (format "<style type=\"text/css\">\n pre.src { background-color: %s;}</style>\n" my-pre-bg)))))

   (add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)
   (defadvice htmlize-buffer-1 (around ome-htmlize-buffer-1 disable)
     (rainbow-delimiters-mode -1)
     ad-do-it
     (rainbow-delimiters-mode t))

   (defun ome-htmlize-setup ()
     (if (el-get-read-package-status 'rainbow-delimiters)
	 (progn
	   (ad-enable-advice 'htmlize-buffer-1 'around 'ome-htmlize-buffer-1)
	   (ad-activate 'htmlize-buffer-1))))
   #+end_src

   Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
   #+END_SRC

** ORG-MODE
*** ORG
    Visual line mode in org mode
    #+begin_src emacs-lisp
    (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
    #+end_src

     Make windmove work in org-mode
     #+BEGIN_SRC emacs-lisp
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)
     #+END_SRC

     Work with SRC blocks
     #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t
	   org-src-tab-acts-natively t
	   org-confirm-babel-evaluate nil
	   org-edit-src-content-indentation 0)
     #+END_SRC

     Dark background org blocks
     #+BEGIN_SRC emacs-lisp
     (require 'color)
     (set-face-attribute 'org-block nil :background
			 (color-darken-name
			  (face-attribute 'default :background) 3))
     #+END_SRC

    Add org-mode to AC
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'ac-modes 'org-mode)
    #+END_SRC   

    Org-bullets
    #+BEGIN_SRC emacs-lisp
    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    #+END_SRC

    Org-mode
    #+BEGIN_SRC emacs-lisp
    (require 'org)
    #+END_SRC

    Evaluate src code without confirmation.
    #+BEGIN_SRC emacs-lisp
      (setq org-confirm-babel-evaluate nil)
    #+END_SRC

    Active Babel languages
    #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (java . t)
       (haskell . t)
       (emacs-lisp . t)
       (js . t)
       (R . t)
       (ruby . t)
       (C . t)
       (shell . t)
       ))
    #+END_SRC
    Org-mind-map
    #+begin_src emacs-lisp
					    ;(load "/home/mijail/.emacs.d/elpa/org-mind-map-20180826.2340/org-mind-map.el")
    ;; This is an Emacs package that creates graphviz directed graphs from
    ;; the headings of an org file
    (use-package org-mind-map
      :init
      (require 'ox-org)
      :ensure t
      ;; Uncomment the below if 'ensure-system-packages` is installed
      ;;:ensure-system-package (gvgen . graphviz)
      :config
      (setq org-mind-map-engine "dot")       ; Default. Directed Graph
      ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
      ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
      ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
      ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
      ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
      ;; (setq org-mind-map-engine "circo")  ; Circular Layout
      )
    #+end_src

    Org-Agenda
    #+begin_src emacs-lisp
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    #+end_src

    The following customization sets a default target file for notes.
    #+begin_src emacs-lisp
    (setq org-default-notes-file "~/Dropbox/org/notes.org")
    #+end_src

    Agenda files
    #+begin_src emacs-lisp
    (setq org-agenda-files '("~/Dropbox/org/mylife.org"))
    #+end_src

    #+RESULTS:
    | ~/Dropbox/org/mylife.org |

    LOGS go into a DRAWER (name of drawer LOGBOOK)
    #+begin_src emacs-lisp
    (setq org-log-into-drawer t)
    #+end_src

    HABITS
    #+begin_src emacs-lisp
    (setq org-modules '(org-habit))
    (eval-after-load 'org
     '(org-load-modules-maybe t))
    #+end_src

    Ordered tasks, tasks should be completed one after the other.
    #+begin_src emacs-lisp
    (setq org-enforce-todo-dependencies t)
    (setq org-track-ordered-property-with-tag t)
    (setq org-agenda-dim-blocked-tasks t)
    (setq org-enforce-todo-checkbox-dependencies t)
    #+end_src

    Org refile targets to other files of agenda
    #+begin_src emacs-lisp
    (setq org-refile-allow-creating-parent-nodes '(confirm))
    (setq org-refile-targets '((nil :maxlevel . 9)
			       (org-agenda-files :maxlevel . 9)))
    (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
    (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
    #+end_src

    #+RESULTS:
    : t
*** Capture Templates
    #+begin_src emacs-lisp
    (setq org-capture-templates
	  '(
	    ;; Templates for the READ keyword sequence
	    ("r" "Read")
	    ;; BOOK (b) Book template
	    ("rb" "Book" entry
	     (file+headline "~/Dropbox/org/mylife.org" "Books")
	     "* SOMEDAY %^{Title}
      - Recommended by %^{recommended by}
      :PROPERTIES:
      :AUTHOR: %^{Author}
      :PAGES: %^{Pages}
      :GENRE: %^{Genre}
      :LINK: %^{Link%:url}
      :END:
      :LOGBOOK:
      - Added: %U
      :END:"
	     :empty-lines 1)

	    ;; Template for Todo
	    ("t" "Todo" entry
	     (file+headline "~/Dropbox/org/mylife.org" "Things to do")
	     "* TODO %^{Todo}
      %?
      :LOGBOOK:
      - Added: %U
      :END:"
	     :empty-lines 1)

	    ;; Template fo Someday
	    ("s" "Someday" entry
	     (file+headline "~/Dropbox/org/mylife.org" "Someday")
	     "* SOMEDAY %^{Someday}
      %?
      :LOGBOOK:
      - Added: %U
      :END:"
	     :empty-lines 1)

	    ))
    #+end_src

    #+RESULTS:
    | r  | Read |       |                                                |                     |
    | rb | Book | entry | (file+headline ~/Dropbox/org/mylife.org Books) | * SOMEDAY %^{Title} |
